syntax = "proto3";

package paxos;

// Defines a VM service, which provides functionality for Proposer, Acceptor
// and Learner.
service VM {
	// Acceptors will receive these
	rpc handle_prepare (PrepareRequest) returns (OKResponse);
	rpc handle_accept_request (AcceptRequest) returns (OKResponse);

	// Proposers will receive these
	rpc handle_promise (PromiseRequest) returns (OKResponse);
	rpc handle_refuse_promise (RefusePromiseRequest) returns (OKResponse);

	// Learners will receive these
	rpc handle_accepted (AcceptedRequest) returns (OKResponse);
}

message PrepareRequest {
	uint64 proposal_number = 1;
	uint64 decree_number = 2;
	string proposer = 3;
}

message AcceptRequest {
	uint64 proposal_number = 1;
	uint64 decree_number = 2;

	// This assumes that the value will always be an integer; this may not
	// be the case for our workloads. Revisit this.
	uint64 value = 3;

	string proposer = 4;
}

message PromiseRequest {
	// Boolean that indicates whether there was any previously accepted
	// proposal for this decree
	bool had_previous = 1;

	// Proposal number and decree number. Notice that decree number is valid
	// even if had_previous is true.
	uint64 proposal_number = 2;
	uint64 decree_number = 3;

	// This assumes that the value will always be an integer; this may not
	// be the case for our workloads. Revisit this.
	uint64 value = 4;
	string acceptor = 5;
}

message RefusePromiseRequest {
	uint64 proposal_number = 1;
	uint64 decree_number = 2;
	string acceptor = 3;
}

message AcceptedRequest {
	uint64 proposal_number = 1;
	uint64 decree_number = 2;

	// This assumes that the value will always be an integer; this may not
	// be the case for our workloads. Revisit this.
	uint64 value = 3;
	string acceptor = 4;
}

// Simple OK Response, with true/false
message OKResponse {
	bool response = 1;
}
